####################################
## vim: ft=tmux
##  _______________________________
## /\                              \
## \_|    __                       |
##   |   / /_____ ___  __  ___  __ |
##   |  / __/ __ `__ \/ / / / |/_/ |
##   | / /_/ / / / / / /_/ />  <   |
##   | \__/_/ /_/ /_/\__,_/_/|_|   |
##   |                 -by m42nk   |
##   |   __________________________|_
##    \_/____________________________/
##
#####################################

#####################################
## General setup
#####################################

## Variables
_cfg_dir="~/.config/tmux"
_cfg_main="${_cfg_dir}/tmux.conf"
_cfg_custom="${_cfg_dir}/custom"
_cfg_scripts="${_cfg_dir}/scripts"
_cfg_default="${_cfg_custom}/default.conf"

## Detect if current pane is running vim programs (vim,nvim,vimdiff, etc)
_is_vim="ps -o state= -o comm= -t '#{pane_tty}' \
    | grep -iqE '^[^TXZ ]+ +(\\S+\\/)?g?(view|n?vim?x?)(diff)?$'"

## Prefix
unbind C-b
set -g prefix \`
bind \` send-prefix

## Enable mouse
set -g mouse on

## Enable clipboard
set -g set-clipboard on

if-shell -b 'command -v xsel' {
  set -s copy-command "xsel -i"
}

if-shell -b '[ $(uname -s) = Darwin ]' {
  set -s copy-command 'pbcopy'
}

#####################################
## Pretty Terminal (undercurls, italic, etc)
#####################################

# MacOS ships with a very old ncurses and terminfo. May need to update terminfo to recognize tmux-256color.
# https://gist.github.com/bbqtd/a4ac060d6f6b9ea6fe3aabe735aa9d95
# https://ryantravitz.com/blog/2023-02-18-pull-of-the-undercurl/
set -g   default-terminal "tmux-256color"

set -gas terminal-overrides "*:Tc" # true color support
set -gas terminal-overrides "*:RGB" # true color support
set -as  terminal-overrides ',*:Smulx=\E[4::%p1%dm'  # undercurl support
set -as  terminal-overrides ',*:Setulc=\E[58::2::%p1%{65536}%/%d::%p1%{256}%/%{255}%&%d::%p1%{255}%&%d%;m'  # underscore colours - needs tmux-3.0

# ## Extended keys (ctrl+enter, shift+enter, etc)
# # IDK if kitty support this inside tmux
# # https://github.com/tmux/tmux/wiki/Modifier-Keys#extended-keys
# set -s extended-keys on
# set -as terminal-features ",*:extkeys"

# set -wg automatic-rename off

## Reload config
bind r run-shell "\
tmux source '$_cfg_default' '$_cfg_main' 2>&1 && \
tmux display-message 'Config reloaded!' \
"

#####################################
## Options
#####################################

## Server options
set -s  focus-events on  # Enable focus-events inside tmux
set -sg escape-time  0   # Reduce delay when pressing <Esc>
set -sg repeat-time  500 # How long tmux wait for repeatable (-r) bind-key

set  -g set-titles-string "#S:#I:#W - tmux #{session_alerts}"
set  -g detach-on-destroy off                                   # Don't exit tmux when session is closed
set  -g history-limit 100000                                    # Increase scrollback buffer size
set  -g set-titles on                                           # Allow tmux to change terminal title
set  -g base-index 1                                            # Start windows numbering at 1
setw -g pane-base-index 1                                       # Start pane numbering at 1
set  -g wrap-search on                                          # Search wrap around
set  -g scroll-on-clear on                                      # Scroll to bottom on clear
set  -g renumber-windows on                                     # Renumber windows when a window is closed

set -g popup-border-lines 'rounded'                            # Make popup window border rounded

set -g pane-border-lines single
set -g pane-border-indicators arrows
set -g pane-border-format "[#{pane_title}]"

## Vim movement in Copy mode
setw    -g  mode-keys     vi
bind    -T  copy-mode-vi  v      send  -X  begin-selection
bind    -T  copy-mode-vi  y      send  -X  copy-pipe-and-cancel
bind    -T  copy-mode-vi  'C-v'  send  -X  rectangle-toggle
bind    -T  copy-mode-vi  'y'    send  -X  copy-selection

#####################################
## Status line
#####################################

source-file "${_cfg_dir}/status.tmux.conf"
# source-file "${_cfg_dir}/status-slant.tmux.conf"

#####################################
## Command Alias
#####################################

set -s command-alias[10] rename-pane='select-pane -T'

#####################################
## Keybinding
## Notes:
## -r = keybinding is repeatable (can be pressed multiple time without prefix)
#####################################


## Command prompt
bind \: command-prompt

## Vim-aware movement
## NOTE:
## vim should also be configured to be tmux-aware
## eg: https://github.com/christoomey/vim-tmux-navigator
bind h if-shell "$_is_vim" "send-keys C-w h" "select-pane -L"
bind j if-shell "$_is_vim" "send-keys C-w j" "select-pane -D"
bind k if-shell "$_is_vim" "send-keys C-w k" "select-pane -U"
bind l if-shell "$_is_vim" "send-keys C-w l" "select-pane -R"

## Window navigation
bind -r C-p   previous-window # Go to previous window
bind -r C-n   next-window     # Go to next window

bind -r M-h   previous-window # Go to previous window (with alt)
bind -r M-l   next-window     # Go to next window (with alt)

# Swap window by index
bind -r C-S-p swap-window -d -t -1
bind -r C-S-n swap-window -d -t +1

## Find session
bind C-f command-prompt -p "match-window: " 'find-window -t %%'

## Window rotation
bind -r o rotate-window # Rotate panes inside window (counter clockwise)
bind -r Tab last-window # move to last active window

## Window layout
bind -r Space next-layout   # Cycle window layout
bind -r C-Space next-layout # Cycle window layout

## Swap pane by index
bind -r J swap-pane -D
bind -r K swap-pane -U
# bind -r C-h swap-pane -L
# bind -r C-l swap-pane -R

## Creation
bind N new-session                             # Create new session
bind c new-window -c "#{pane_current_path}"    # Create new window, at the end
bind C new-window -a -c "#{pane_current_path}" # Create new window, next to current

## Sessionizer
# bind n display-popup -E -h '80%' -w '80%' "${_cfg_scripts}/sessionizer.sh"
bind n display-popup -E -h '80%' -w '80%' "${_cfg_scripts}/launcher.sh"
bind C-n run "${_cfg_scripts}/sessionizer-rename-session.sh"

## Split window
bind '\' if -F "#{window_zoomed_flag}" 'select-pane -l' 'split-window -h -c "#{pane_current_path}"'  # Backslash split vertical (`|` without shift)
bind -   if -F "#{window_zoomed_flag}" 'select-pane -l' 'split-window -v -c "#{pane_current_path}"'  # Minus split horizontal

## Pane join & breaking
bind C-S-j choose-tree 'join-pane -t "%%"'            # Choose pane from tree and join them to current
bind !   break-pane ';' display-message "Pane moved!" # Break pane to a new window, then focus to it

bind m select-pane -m \; display-message "#{?pane_marked,Mark,Unmark}ed pane: #P" # mark
bind M select-pane -M # unmark
bind J join-pane -h

## Zoom
bind Enter resize-pane -Z

## Rename
bind , command-prompt -I "#{window_name}" -p 'rename-window:' 'rename-window "%%"'
bind . command-prompt -I "#{session_name}" -p 'rename-session:' 'rename-session "%%"'
bind > command-prompt -I "#{pane_title}" -p  'rename-pane:' 'rename-pane "%%"'
bind B command-prompt -I "#{pane_title}" -p  'rename-pane:' 'rename-pane "%%"'

## Fuzzy chooser
bind i display-popup -E -h '80%' -w '80%' "${_cfg_scripts}/fuzzy-chooser.sh"

## Scratch
bind q run "DIR='#{pane_current_path}' ${_cfg_scripts}/popup-window.sh"

## Toggle Pane Border
bind b set pane-border-status

## Show pane number (used for jumping)
bind f display-panes -d 0

## Clear scrollback buffer (since we use scroll-on-clear)
bind C-l clear-history\; display-message "Scrollback buffer cleared"

## Go into copy-mode-vi and start searching
bind-key / copy-mode \; send-key ?

## Save scrollback buffer to a file
bind-key P command-prompt -p 'save history to filename:' -I '~/tmux.history' 'capture-pane -J -S -; save-buffer %1 ; delete-buffer'

#####################################
## Key menu
#####################################

## Delete/Detach/Kill
bind d display-menu -x 0 -y S \
  -T "Delete/Detach/Kill" \
  "Window"       w "kill-window -t #{window_id}" \
  "Session"      s "kill-session -t #{session_id}" \
  "Pane"         p "kill-pane -t #{pane_id}" \
  "Pane (quick)" d "kill-pane -t #{pane_id}" \
  "Client"       q "detach-client" \
  "Server"       S "confirm-before -p 'Kill tmux server?' 'kill-server'" \
  "" \
  "Other window except current" W "kill-window -t #{window_id} -a" \
  "Other pane except current"   P "kill-pane -t #{pane_id} -a" \
  "Detached session"            D "run 'tmux list-sessions | grep -v attached | cut -d: -f1 |  xargs -t -n1 tmux kill-session -t'"

#####################################
## Keybind chording with key-table
#####################################

## Resize
bind R switch-client -T resize
bind -T resize -r h resize-pane -L  1 ';' switch-client -T resize
bind -T resize -r j resize-pane -D  1 ';' switch-client -T resize
bind -T resize -r k resize-pane -U  1 ';' switch-client -T resize
bind -T resize -r l resize-pane -R  1 ';' switch-client -T resize
bind -T resize -r H resize-pane -L 10 ';' switch-client -T resize
bind -T resize -r J resize-pane -D 10 ';' switch-client -T resize
bind -T resize -r K resize-pane -U 10 ';' switch-client -T resize
bind -T resize -r L resize-pane -R 10 ';' switch-client -T resize

## Pane navigation
bind w switch-client -T swaping-window
bind -T swaping-window p swap-window -d -t -1 ';' switch-client -T swaping-window
bind -T swaping-window n swap-window -d -t +1 ';' switch-client -T swaping-window
bind -T swaping-window h swap-window -d -t -1 ';' switch-client -T swaping-window
bind -T swaping-window l swap-window -d -t +1 ';' switch-client -T swaping-window
# bind -T swap-window -r h swap-window -s +0 -t -1 ';' select-window -t -1
# bind -T swap-window -r l swap-window -s +0 -t +1 ';' select-window -t +1

#####################################
## Hooks
#####################################

## Renumber session
## Session name will be "$number_of_session + 1"
set-hook -g session-created "run ${_cfg_scripts}/hook-renumber-sessions.sh"
set-hook -g session-closed  "run ${_cfg_scripts}/hook-renumber-sessions.sh"
set-hook -g session-closed  "run ${_cfg_scripts}/hook-reactivate-last-session-on-close.sh"

#####################################
## Personal
#####################################

source-file "${_cfg_custom}/personal.conf"
